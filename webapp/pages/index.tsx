import { useEffect, useState, useReducer } from "react";
import { unionBy } from "lodash";
import type { NextPage } from "next";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import relativeTime from "dayjs/plugin/relativeTime";
import Script from "next/script";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";

import { Table, Text, Container } from "@nextui-org/react";
dayjs.extend(duration);
dayjs.extend(relativeTime);

const vehicle_types = {
  0: "Tram",
  1: "Subway/metro",
  2: "Rail",
  3: "Bus",
  4: "Ferry",
};

const get_vehicle_type = (type: number) => {
  if (type in Object.keys(vehicle_types)) {
    return vehicle_types[type];
  }
  return "Unknown";
};

// Msg is a message from the kafka processor
type Msg = {
  stopId: string;
  stop_name: string;
  stop_lat: number;
  stop_lon: number;
  location_type: string;
  vehicle_type: number;
  // Delay in seconds
  avg_departure_delay: number;
  avg_arrival_delay: number;
  window_start: string;
  window_end: string;
};

type State = {
  stops: Msg[];
};

type Action = {
  type: action_types;
  value: Msg[];
};

// KMsg is a message from kafka
type KMsg = {
  offset: number;
  message: string;
};

enum action_types {
  ADD_STOPS,
}

const initialState = {
  stops: [],
};

const msgReducer = (state: State, action: Action) => {
  switch (action.type) {
    case action_types.ADD_STOPS: {
      return {
        ...state,
        stops: unionBy(action.value, state.stops, "stopId"),
      };
    }
    default:
      return state;
  }
};

const Home: NextPage = () => {
  const [mapsLoaded, setMapsLoaded] = useState(false);
  const [ws, setWs] = useState<WebSocket>();
  const [state, dispatch] = useReducer(msgReducer, initialState);
  const [mapPoints, setMapPoints] = useState(null);

  useEffect(() => {
    if (!mapsLoaded) return;
    console.log("Maps is loaded");
    // @ts-ignore
    const map = new google.maps.Map(document.getElementById("map"), {
      zoom: 6,
      center: { lat: 59.893, lng: 10.645 },
    });

    const mapPoints = new google.maps.MVCArray([]);
    setMapPoints(mapPoints);

    const heatMap = new google.maps.visualization.HeatmapLayer({
      data: mapPoints,
    });
    heatMap.setMap(map);
  }, [mapsLoaded]);

  useEffect(() => {
    const ws = new WebSocket(
      "ws://localhost:9999/?topic=avg-stop-delays&consumerGroup=webapp"
    );
    setWs(ws);
    ws.onopen = () => {
      console.log("WS connection open...");
    };
    ws.onmessage = (message) => {
      console.info("Received new message from kafka");
      const value: Msg[] = JSON.parse(message.data).map((m: KMsg) =>
        JSON.parse(m.message)
      );
      dispatch({ type: action_types.ADD_STOPS, value });
    };
  }, [setWs]);

  useEffect(() => {
    if (mapPoints) {
      mapPoints.clear();
      state.stops.forEach((stop) => {
        mapPoints.push({
          weight: stop.avg_arrival_delay + 0.5,
          location: new google.maps.LatLng(stop.stop_lat, stop.stop_lon),
        });
      });
    }
  }, [state.stops, mapPoints]);

  const topStops = [...state.stops]
    .sort((a, b) => b.avg_arrival_delay - a.avg_arrival_delay)
    .slice(0, 10);

  return (
    <div className={styles.container}>
      <Script
        src={`https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_MAPS_API_KEY}&libraries=visualization`}
        onLoad={() => {
          setMapsLoaded(true);
        }}
      />
      <Head>
        <title>Norway public transport delays</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Text h2>Delays in publc transport in Norway</Text>
      <Text>
        This heatmap shows where there are delays in the public transport system
        in Norway. The map is using real-time data from{" "}
        <a target="_blank" href="https://entur.no" rel="noreferrer">
          Entur
        </a>
      </Text>

      <div id="map" className={styles.map} />

      <Container justify="space-between" display="flex">
        <Text small>Currently showing data for {state.stops.length} stops</Text>
        <Text small>
          {state.stops.length > 0 ? (
            <>
              Data used is aggregated between{" "}
              {state.stops[state.stops.length - 1].window_start} and{" "}
              {state.stops[state.stops.length - 1].window_end}
            </>
          ) : (
            ""
          )}
        </Text>
      </Container>

      <Text h3>Stops with the most delays:</Text>

      <Table aria-label="top delays">
        <Table.Header>
          <Table.Column>Stop name</Table.Column>
          <Table.Column>Average arrival delay</Table.Column>
          <Table.Column>Stop vehicle type</Table.Column>
        </Table.Header>
        <Table.Body>
          {topStops.map((stop) => (
            <Table.Row key={stop.stopId}>
              <Table.Cell>{stop.stop_name}</Table.Cell>
              <Table.Cell>
                {dayjs.duration(stop.avg_arrival_delay * 1000).humanize()}
              </Table.Cell>
              <Table.Cell>{get_vehicle_type(stop.vehicle_type)}</Table.Cell>
            </Table.Row>
          ))}
        </Table.Body>
      </Table>

      <footer className={styles.footer}></footer>
    </div>
  );
};

export default Home;
